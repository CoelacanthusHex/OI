//还可以用一维数组这样写↓_↓
//设 f[v]表示重量不超过v公斤的最大价值， 则f[v]=max(f[v]，f[v-w[i]]+c[i]) ，当v>=w[i]，1<=i<=n 。
#include<stdio.h>
#include<algorithm>
using namespace std;
const int maxm = 2001, maxn = 101;
int m, n;
int w[maxn], c[maxn];
int f[maxm]; 
int main()
{
    scanf("%d%d",&m, &n);            //背包容量m和物品数量n
    for (int i=1; i <= n; i++)
        scanf("%d%d",&w[i],&c[i]);     //每个物品的重量和价值
    for (int i=1; i <= n; i++)             //设f(v)表示重量不超过v公斤的最大价值
        for (int v = m; v >= w[i]; v--)  //注意是逆序
            f[v] = max(f[v-w[i]]+c[i], f[v]);
    printf("%d\n",f[m]);                      // f(m)为最优解
    return 0;
}
/*有N件物品和一个容量为V的背包。第i件物品的价格（即体积，下同）是w[i]，价值是c[i]。求解将哪些物品装入背包可使这些物品的费用总和不超过背包容量，且价值总和最大。

这是最基础的背包问题，总的来说就是：选还是不选，这是个问题<(￣ˇ￣)/

相当于用f[i][j]表示前i个背包装入容量为v的背包中所可以获得的最大价值。

对于一个物品，只有两种情况

　　情况一: 第i件不放进去，这时所得价值为:f[i-1][v]

　　情况二: 第i件放进去，这时所得价值为：f[i-1][v-c[i]]+w[i] 

状态转移方程为：f[i][v] = max(f[i-1][v], f[i-1][v-w[i]]+c[i])

一道裸01背包题↓_↓


采药

题目描述 Description
辰辰是个天资聪颖的孩子，他的梦想是成为世界上最伟大的医师。为此，他想拜附近最有威望的医师为师。医师为了判断他的资质，给他出了一个难题。医师把他带到一个到处都是草药的山洞里对他说：“孩子，这个山洞里有一些不同的草药，采每一株都需要一些时间，每一株也有它自身的价值。我会给你一段时间，在这段时间里，你可以采到一些草药。如果你是一个聪明的孩子，你应该可以让采到的草药的总价值最大。” 

如果你是辰辰，你能完成这个任务吗？

输入描述 Input Description
输入第一行有两个整数T（1<=T<=1000）和M（1<=M<=100），用一个空格隔开，T代表总共能够用来采药的时间，M代表山洞里的草药的数目。接下来的M行每行包括两个在1到100之间（包括1和100）的整数，分别表示采摘某株草药的时间和这株草药的价值。

输出描述 Output Description
输出包括一行，这一行只包含一个整数，表示在规定的时间内，可以采到的草药的最大总价值。

样例输入 Sample Input
70 3

71 100

69 1

1 2

样例输出 Sample Output
3

数据范围及提示 Data Size & Hint
【数据规模】

对于30%的数据，M<=10；

对于全部的数据，M<=100。
*/
